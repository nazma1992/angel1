provider "aws" {
  access_key = "${var.AKIAWJCGHGKM7KPQPU7R}"
  secret_key = "${var.loEbj+Tc6clrBuNgLiAN5FA8yxenunmKBVNNYPeI}"
  region     = "${var.us-east-1}"
 
}

#data
data "aws_availability_zones" "available" {}

resources
resource "aws_vpc" "myvpc" {
        cidr_block = "${var.10.0.0.0/16}"
        tags {
                "Names" = "${var.environment_tag}-vpc"
                "Environment" = "${var.environment_tag}"
        }
  cidr_block = "${var.cidr_vpc}"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags {
    "Environment" = "${var.environment_tag}"
  }
}

resource "aws_internet_gateway" "igw" {
        vpc_id = "${aws_vpc.myvpc.id}"
        tags {
                "Names" = "${var.environment_tag}-igw"
                "Environment" = "${var.environment_tag}"
        }
  vpc_id = "${aws_vpc.myvpc.id}"
  tags {
    "Environment" = "${var.environment_tag}"
  }
}
resource "aws_subnet" "privatesubnet1" {
        vpc_id = "${aws_vpc.myvpc.id}"
        cidr_block = "10.0.0.0/24"
        map_public_ip_on_launch = "true"
        availability_zone = "${data.aws_availability_zones.available.names[0]}"
        tags {
                "Names" = "${var.environment_tag}-subnet"
                "Environment" = "${var.environment_tag}"
        }
resource "aws_subnet" "publicsubnet1" {
  vpc_id = "${aws_vpc.myvpc.id}"
cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone = "${var.availability_zone}"
  tags {
    "Environment" = "${var.environment_tag}"
  }
}

resource "aws_route_table" "rtb" {
        vpc_id = "${aws_vpc.myvpc.id}"
resource "aws_route_table" "rtb_public" {
  vpc_id = "${aws_vpc.myvpc.id}"

        route {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.igw.id}"
        }
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.igw.id}"
  }

        tags {
                "Names" = "${var.environment_tag}-rtb"
                "Environment" = "${var.environment_tag}"
        }
                                            tags {
    "Environment" = "${var.environment_tag}"
  }
}

resource "aws_route_table_association" "rta-subnet" {
  subnet_id      = "${aws_subnet.privatesubnet1.id}"
  route_table_id = "${aws_route_table.rtb.id}"
resource "aws_route_table_association" "rta_publicsubnet" {
  subnet_id      = "${aws_subnet.publicsubnet1.id}"
  route_table_id = "${aws_route_table.rtb_public.id}"
}

resource "aws_security_group" "http_sg" {
        name = "http_sg"
        vpc_id = "${aws_vpc.myvpc.id}"

        # HTTP access from the VPC
        ingress {
                from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
        }

        # outbound internet access
        egress {
            from_port   = 22
            to_port     = 22
            protocol    = "-1"
            cidr_blocks = ["0.0.0.0/0"]
        }
resource "aws_security_group" "sg_22" {
  name = "sg_22"
  vpc_id = "${aws_vpc.myvpc.id}"

  # SSH access from the VPC
  
  ingress {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    "Environment" = "${var.environment_tag}"
  }
}

        tags {
                "Names" = "${var.environment_tag}-sg"
                "Environment" = "${var.environment_tag}"
        }
resource "aws_key_pair" "ec2key" {
  key_name = "publicKey"
  public_key = "${file(var.public_key_path)}"
}

resource "aws_instance" "testInstance" {
  ami           = "ami-0747bdcabd34c712a"
  instance_type = "t2.micro"
  subnet_id = "${aws_subnet.privatesubnet1.id}"
  vpc_security_group_ids = ["${aws_security_group.http_sg.id}"]
  ami           = "${var.instance_ami}"
  instance_type = "${var.t2.micro}"
  subnet_id = "${aws_subnet.publicsubnet1.id}"
  vpc_security_group_ids = ["${aws_security_group.sg_22.id}"]
key_name = "${aws_key_pair.ec2key.key_name}"

   tags {
                "Names" = "${var.environment_tag}-instance"
  tags {
                "Environment" = "${var.environment_tag}"
        }
}

resource "aws_eip" "ip" {
  instance = "${aws_instance.testInstance.id}"
}


